import logging # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –ª–æ–≥–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ù—É–∂–µ–Ω –¥–ª—è aiogram

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor

# –∏–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞, –∫–æ–Ω–µ–∫—Ç–∞ –±–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
import keyboards as kb # –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
from config import TOKEN # —Ç–æ–∫–µ–Ω
from DBconfig import HOST, USER, PASSWD, PORT, DATABASE # –∫–æ–Ω–µ–∫—Ç –∫ –±–¥
from messages_ru import MESSAGES # —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
# from utils import TestStates

#/ –∏–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import os # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
import random # —Ä–∞–Ω–¥–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
import datetime

import asyncio
from aiogram.dispatcher import Dispatcher

flag_group_id = None
# /


# mysql –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
import mysql.connector
from mysql.connector import errorcode
try:
    db = mysql.connector.connect(
      host=HOST,
      user=USER,
      passwd=PASSWD,
      port=PORT,
      database=DATABASE
    )
except mysql.connector.Error as err:
  if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
    print("Something is wrong with your user name or password")
    sys.exit()
  elif err.errno == errorcode.ER_BAD_DB_ERROR:
    print("Database does not exist")
    sys.exit()
  else:
    print(err)
    sys.exit()

cursor = db.cursor()
# /

bot = Bot(token=TOKEN)
# For example use simple MemoryStorage for Dispatcher.
logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class reg(StatesGroup):
    lang = State() 
    fname = State()
    lname = State()
    fname_waiting_response = State()
    lname_waiting_response = State()
    waiting_inquiry = State()
    err_login = State()
    # reg
@dp.message_handler(state=reg.err_login)
async def name_step233(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–í—ã–±–æ—Ä —è–∑—ã–∫–∞ s', reply_markup=kb.markup_lang)
    print("lol")    
    await reg.lang.set() #–°—Ç–µ–π—Ç 

# –∂–º—ë–º —Å—Ç–∞—Ä—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è 
@dp.message_handler(commands='start', commands_prefix='!/')
async def start_step(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–í—ã–±–æ—Ä —è–∑—ã–∫–∞', reply_markup=kb.markup_lang)    
    await reg.lang.set() #–°—Ç–µ–π—Ç 

# =================================================================== lang
# –°—Ç–µ–π—Ç lang
# –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
# –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –≤–µ—Ä–Ω—ã –∏–¥–µ–º –¥–∞–ª—å—à–µ —Å—Ç–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–µ–π—Ç

@dp.message_handler(lambda message: message.text in ["“ö–∞–∑–∞“õ—à–∞ üá∞üáø", "–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß"], state=reg.lang, content_types=types.ContentTypes.TEXT)
async def lang_true(message: types.Message, state: FSMContext):
    async with state.proxy() as data:    #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data['lang_date'] = message.text #–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–æ–π    
    await message.answer(text=MESSAGES['greeting_fname'].format(name_in_mes=message.chat.first_name), reply_markup=kb.markup_yes_no)
    await reg.fname.set() #–°—Ç–µ–π—Ç
# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É

@dp.message_handler(lambda message: message.text not in ["“ö–∞–∑–∞“õ—à–∞ üá∞üáø", "–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß"], state=reg.lang)
async def lang_er(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞')
# =================================================================== fname
# –°—Ç–µ–π—Ç fname

# –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–Ω–µ—Ç" —Å—Ç–∞–≤–∏ —Å—Ç–µ–π—Ç fname_waiting_response
# –∂–¥—ë–º –∏–º—è
@dp.message_handler(lambda message: message.text in ["–ù–µ—Ç"], state=reg.fname)
async def fname_no(message: types.Message):
    await bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é', reply_markup=types.ReplyKeyboardRemove())    
    await reg.fname_waiting_response.set()

# –æ–∂–∏–¥–∞–µ–º –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=reg.fname_waiting_response)
async def fname_no_waiting_answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:    #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data['fname_date'] = message.text #–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–æ–π     
    await message.answer(text=MESSAGES['greeting_lname'].format(name_in_mes=message.text, lname_in_mes=message.chat.last_name), reply_markup=kb.markup_yes_no)
    await reg.lname.set()
# -------------------------------

# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–º–µ—Ç –¥–∞
# –∏–¥–µ–º –Ω–∞ –Ω–µ—Å–∫—Å —Å—Ç–µ–π—Ç
@dp.message_handler(lambda message: message.text in ["–î–∞"], state=reg.fname)
async def fname_yes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:    #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data['fname_date'] = message.chat.first_name #–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–æ–π     
    await message.answer(text=MESSAGES['greeting_lname'].format(name_in_mes=message.chat.first_name, lname_in_mes=message.chat.last_name), reply_markup=kb.markup_yes_no)
    await reg.lname.set() #–°—Ç–µ–π—Ç 
    # await state.finish()

# –æ–±—Ä–æ–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
@dp.message_handler(lambda message: message.text not in ["–ù–µ—Ç", "–î–∞"], state=reg.fname)
async def fname_er(message: types.Message):
    await bot.send_message(message.from_user.id, MESSAGES['error_yes_and_no'], reply_markup=kb.markup_yes_no)    
# =================================================================== lname
# –°—Ç–µ–π—Ç lname

# –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–Ω–µ—Ç" —Å—Ç–∞–≤–∏ —Å—Ç–µ–π—Ç lname_waiting_response
# –∂–¥—ë–º —Ñ–∞–º–∏–ª–∏—é
@dp.message_handler(lambda message: message.text in ["–ù–µ—Ç"], state=reg.lname)
async def process_gender_invalid22(message: types.Message):
    await bot.send_message(message.from_user.id, MESSAGES['send_name'], reply_markup=types.ReplyKeyboardRemove())    
    await reg.lname_waiting_response.set()

# –æ–∂–∏–¥–∞–µ–º —Ñ–∞–º–∏–ª–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç 
# –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç 
# —É–±–∏—Ä–∞–µ–º —Å—Ç–µ–π—Ç
@dp.message_handler(state=reg.lname_waiting_response)
async def name_step233333(message: types.Message, state: FSMContext):
    async with state.proxy() as data:    #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data['lname_date'] = message.text #–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–æ–π     

        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('–í–∞—à —è–∑—ã–∫:,', (data['lang_date'])),
                md.text('–í–∞—à –∏–º—è:,', (data['fname_date'])),
                md.text('–í–∞—à —Ñ–∞–º–∏–ª–∏—è:,', (data['lname_date'])),

                sep='\n',
            ),
            reply_markup=kb.markup_main,
            parse_mode=ParseMode.MARKDOWN, # —Ä—É–¥–∏–º–µ–Ω—Ç —É–±—Ä–∞—Ç—å
        )
        # =====
        sql = "INSERT INTO `kaizen_registration` (`tel_fname`, `tel_lname`, `first_name`, `last_name`, `chat_id`, `lang`, `date_registration`) VALUES (%s, %s, %s, %s, %s, %s, %s);"
        val = (message.chat.first_name, message.chat.last_name, data['lang_date'], data['fname_date'], message.chat.id, data['lname_date'], message.date)
        cursor.execute(sql, val)
        db.commit()
        # ====
        await state.finish()
# -------------------------------
# –µ—Å–ª–∏ –¥–∞ —Å—Ä–∞–∑—É –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç 
# —É–±–∏—Ä–∞–µ–º —Å—Ç–µ–π—Ç
@dp.message_handler(lambda message: message.text in ["–î–∞"], state=reg.lname)
async def name_stepqq2(message: types.Message, state: FSMContext):
        async with state.proxy() as data:    #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            data['lname_date'] = message.chat.last_name #–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–æ–π     

        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('–í–∞—à —è–∑—ã–∫:,', (data['lang_date'])),
                md.text('–í–∞—à –∏–º—è:,', (data['fname_date'])),
                md.text('–í–∞—à —Ñ–∞–º–∏–ª–∏—è:,', (data['lname_date'])),

                sep='\n',
            ),
            reply_markup=kb.markup_main,
            parse_mode=ParseMode.MARKDOWN, # —Ä—É–¥–∏–º–µ–Ω—Ç —É–±—Ä–∞—Ç—å
        )
        # =====
        sql = "INSERT INTO `kaizen_registration` (`tel_fname`, `tel_lname`, `first_name`, `last_name`, `chat_id`, `lang`, `date_registration`) VALUES (%s, %s, %s, %s, %s, %s, %s);"
        val = (message.chat.first_name, message.chat.last_name, data['lang_date'], data['fname_date'], message.chat.id, data['lname_date'], message.date)
        cursor.execute(sql, val)
        db.commit()
        # ====
        await state.finish()

# –æ–±—Ä–æ–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
@dp.message_handler(lambda message: message.text not in ["–ù–µ—Ç", "–î–∞"], state=reg.lname)
async def lname_er(message: types.Message):
    await bot.send_message(message.from_user.id, MESSAGES['error_yes_and_no'], reply_markup=kb.markup_yes_no)    
# =================================================================== 
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–º—ë—Ç "–í–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
# –ü–∏—à–µ–º —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(text=["–í–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ","–£–∫–∞–∑–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É"])
# @dp.message_handler(text=["–í–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ","–£–∫–∞–∑–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É"], commands=['info'])
async def process_suggestion(message: types.Message): 
    await bot.send_message(message.from_user.id,  MESSAGES['message_waiting_inquiry'].format(namber_mes=message.chat.first_name), 
                              reply_markup=types.ReplyKeyboardRemove())
    await reg.waiting_inquiry.set()                        
# –ñ–¥–µ–º –æ—Ç–≤–µ—Ç 
# –ü–∏—à–µ–º —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ
@dp.message_handler(content_types=["text"], state=reg.waiting_inquiry)
async def process_suggestion_wait_text(message: types.Message, state: FSMContext):
        if len(message.text)<=8:
                await bot.send_message(message.from_user.id, '–º–µ–Ω—å—à–µ 8', reply_markup=kb.markup_main)
        else:
                await bot.send_message(message.from_user.id,  MESSAGES['message_waiting_inquiry_thx'],
                                  reply_markup=kb.markup_main)  
        await state.finish()






@dp.message_handler(content_types=["photo"], state=reg.waiting_inquiry)
async def process_suggestion_wait_photo(message: types.Message, state: FSMContext):
                print(message.caption)
        # if len(message.caption)<=8:
        #         await bot.send_message(message.from_user.id, '–º–µ–Ω—å—à–µ 8', reply_markup=kb.markup_main)
        # else:
                path = F"/var/www/bot0.1.5/download/{message.chat.id}"
                try:
                    os.mkdir(path)
                except OSError:
                    pass
                else:
                    pass
                photo = message.photo.pop() 
                convert_date_telegram = (str(message.date).replace(' ', '_'))
                await photo.download (F'download/{message.chat.id}/{convert_date_telegram}-{message.message_id}.png')
                way_to_file = F'download/{message.chat.id}/{convert_date_telegram}-{message.message_id}.png'
                sql = "INSERT INTO kaizen_feedback (first_name, last_name, category, chat_id, suggestion, date_message, contacts, file_is_from, way_photo) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)"
                val = (message.chat.first_name, message.chat.last_name, '-', message.chat.id, way_to_file, message.date,'-','-','-')
                # –ó–ê–ú–ï–¢–ö–ê —É date_message —Å—Ç–æ–∏—Ç datetime (–º–æ–∂–µ—Ç –≤—ã–¥–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—ã–π)
                cursor.execute(sql, val)
                db.commit()  

                global flag_group_id
                if flag_group_id == message.media_group_id:
                        print("net")
                else:
                    flag_group_id = message.media_group_id
                    if message.media_group_id != None:
                        print("taktak")
                        await bot.send_message(message.from_user.id, '—Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', reply_markup=kb.markup_main)

                if message.media_group_id == None: 
                    print("taktak None") 
                    await bot.send_message(message.from_user.id, '—Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', reply_markup=kb.markup_main)

                await state.finish()
                # print(message.message_id)
                # print(message.date)
                # print(message.caption)
                # 



#---------------------------
@dp.message_handler(text=["–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üñä"])
async def chenge_info(message: types.Message): 
    await bot.send_message(message.from_user.id, '–í—ã–±–æ—Ä —è–∑—ã–∫–∞', reply_markup=kb.markup_lang)    
    await reg.lang.set() #–°—Ç–µ–π—Ç    
# =================================================================== 




@dp.message_handler()
async def echo_message(message: types.Message):
    try:
        sql = "SELECT * FROM `kaizen_registration` WHERE `chat_id` = %s LIMIT 1"
        val = (message.chat.id, )
        cursor.execute(sql, val)

        id_tel = cursor.fetchall()
        for id_tel_end in id_tel:
            id_tel_sql = id_tel_end[3]

        db.commit()

        if id_tel_sql is not None:
            await bot.send_message(message.from_user.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É', reply_markup=kb.markup_main)

    except Exception as e:
            sql = "INSERT INTO `kaizen_registration` (`tel_fname`, `tel_lname`, `first_name`, `last_name`, `chat_id`, `lang`, `date_registration`) VALUES (%s, %s, %s, %s, %s, %s, %s);"
            val = (message.chat.first_name, message.chat.last_name, "", "", message.chat.id, "", message.date)
            cursor.execute(sql, val)
            db.commit()

            await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', reply_markup=kb.markup_lang)  
            await reg.lang.set()



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)